#!/usr/bin/env python3
"""
Generic Mutagen management script

This script reads configuration from mutagen.yml in the project section.
It can be used across different projects by updating the YAML configuration.
"""

import argparse
import subprocess
import sys
import time
from pathlib import Path
from typing import Dict, List, Optional
import shutil

try:
    import yaml
except ImportError:
    print("PyYAML is required. Install with: pip install PyYAML")
    sys.exit(1)


class Colors:
    RED = "\033[0;31m"
    GREEN = "\033[0;32m"
    YELLOW = "\033[1;33m"
    NC = "\033[0m"


class MutagenManager:
    def __init__(self, config_file: str = "mutagen.yml"):
        self.config_file = Path(config_file)
        self.config = {}
        self.template_path = (
            Path(__file__).parent.parent / "asssets" / "mtg-template.yml"
        )

    def _load_config(self) -> None:
        """Load configuration from YAML file"""
        if not self.config_file.exists():
            self._error(f"Configuration file {self.config_file} not found")
            sys.exit(1)

        try:
            with open(self.config_file, "r") as f:
                data = yaml.safe_load(f)
                self.config = data.get("project", {})
        except yaml.YAMLError as e:
            self._error(f"Error parsing YAML: {e}")
            sys.exit(1)

        # Validate required configuration
        required_fields = [
            "name",
            "sessionName",
            "localPath",
            "remoteHost",
            "remotePath",
        ]
        missing = [field for field in required_fields if not self.config.get(field)]

        if missing:
            self._error(f"Missing required configuration: {', '.join(missing)}")
            sys.exit(1)

        self._log(f"Loaded configuration for project: {self.config['name']}")

    def init_project(self) -> None:
        """Initialize project by copying template configuration"""
        target_file = Path.cwd() / "mutagen.yml"

        if target_file.exists():
            self._warn(f"Configuration file {target_file} already exists")
            response = input("Overwrite? (y/N): ").strip().lower()
            if response != "y":
                self._log("Init cancelled")
                return

        if not self.template_path.exists():
            self._error(f"Template file not found: {self.template_path}")
            sys.exit(1)

        try:
            shutil.copy2(self.template_path, target_file)
            self._log(f"✓ Template copied to {target_file}")
            self._log("Please edit the configuration file to set:")
            print("  - PROJECT_NAME: Your project name")
            print("  - LOCAL_PATH: Local project directory")
            print("  - REMOTE_SSH_HOST: SSH host alias or hostname")
            print("  - REMOTE_PATH: Remote project directory")
        except Exception as e:
            self._error(f"Failed to copy template: {e}")
            sys.exit(1)

    def _log(self, message: str) -> None:
        """Print success message in green"""
        print(f"{Colors.GREEN}{message}{Colors.NC}")

    def _warn(self, message: str) -> None:
        """Print warning message in yellow"""
        print(f"{Colors.YELLOW}{message}{Colors.NC}")

    def _error(self, message: str) -> None:
        """Print error message in red"""
        print(f"{Colors.RED}{message}{Colors.NC}", file=sys.stderr)

    def _run_command(
        self, cmd: List[str], capture_output: bool = True
    ) -> subprocess.CompletedProcess:
        """Run a command and return the result"""
        try:
            return subprocess.run(
                cmd, capture_output=capture_output, text=True, check=False
            )
        except FileNotFoundError:
            self._error(f"Command not found: {cmd[0]}")
            sys.exit(1)

    def _check_prerequisites(self) -> None:
        """Check if required tools are installed"""
        # Check if mutagen is installed
        result = self._run_command(["mutagen", "--version"])
        if result.returncode != 0:
            self._error(
                "Mutagen not installed. See: https://mutagen.io/documentation/introduction/installation"
            )
            sys.exit(1)

        # Check for .gitignore
        if not Path(".gitignore").exists():
            self._warn(".gitignore not found. Will use basic ignore patterns.")

    def test_ssh_connection(self) -> bool:
        """Test SSH connection to remote host"""
        remote_host = self.config["remoteHost"]
        remote_path = self.config["remotePath"]

        self._log(f"Testing SSH connection to {remote_host}...")

        cmd = [
            "ssh",
            "-o",
            "ConnectTimeout=5",
            "-o",
            "BatchMode=yes",
            remote_host,
            f"mkdir -p '{remote_path}'",
        ]

        result = self._run_command(cmd)
        if result.returncode == 0:
            self._log("✓ SSH connection successful and remote directory ready")
            return True
        else:
            self._warn("SSH connection failed. Check SSH keys and host configuration.")
            return False

    def _get_session_id(self) -> Optional[str]:
        """Get the session ID for the current project"""
        session_name = self.config["sessionName"]
        result = self._run_command(["mutagen", "sync", "list"])

        if result.returncode != 0:
            return None

        lines = result.stdout.split("\n")
        for i, line in enumerate(lines):
            if f"Name: {session_name}" in line and i + 1 < len(lines):
                session_line = lines[i + 1].strip()
                if session_line.startswith("Identifier:"):
                    return session_line.split()[1]
        return None

    def _get_forward_id(self) -> Optional[str]:
        """Get the forward ID for the current project"""
        forward_name = self.config.get("forwardName", "")
        if not forward_name:
            return None

        result = self._run_command(["mutagen", "forward", "list"])

        if result.returncode != 0:
            return None

        lines = result.stdout.split("\n")
        for i, line in enumerate(lines):
            if f"Name: {forward_name}" in line and i + 1 < len(lines):
                forward_line = lines[i + 1].strip()
                if forward_line.startswith("Identifier:"):
                    return forward_line.split()[1]
        return None

    def _session_exists(self) -> bool:
        """Check if sync session exists"""
        return self._get_session_id() is not None

    def _forward_exists(self) -> bool:
        """Check if port forwarding exists"""
        return self._get_forward_id() is not None

    def _build_ignore_patterns(self) -> List[str]:
        """Build ignore patterns for mutagen"""
        ignore_args = ["--ignore-vcs"]

        # Add additional mutagen-specific patterns
        patterns = [
            ".DS_Store",
            "Thumbs.db",
            "*.pt",
            "*.pth",
            "*.ckpt",
            "*.safetensors",
            "*.key",
            "*.pem",
        ]

        for pattern in patterns:
            ignore_args.extend(["--ignore", pattern])

        return ignore_args

    def start_session(self) -> None:
        """Start Mutagen session with port forwarding"""
        self._log(f"Starting {self.config['sessionName']} session...")

        if not self.test_ssh_connection():
            self._error("Cannot proceed without SSH connectivity")
            sys.exit(1)

        # Start sync session
        if self._session_exists():
            self._warn(f"{self.config['sessionName']} sync session already exists")
        else:
            self._log("Creating sync session with .gitignore patterns...")

            ignore_patterns = self._build_ignore_patterns()

            cmd = (
                [
                    "mutagen",
                    "sync",
                    "create",
                    "--name",
                    self.config["sessionName"],
                    "--mode",
                    "two-way-resolved",
                ]
                + ignore_patterns
                + [
                    self.config["localPath"],
                    f"{self.config['remoteHost']}:{self.config['remotePath']}",
                ]
            )

            result = self._run_command(cmd, capture_output=False)
            if result.returncode == 0:
                self._log(
                    "✓ Sync session created with automatic .gitignore integration"
                )
            else:
                self._error("Failed to create sync session")
                return

        # Start port forwarding
        forward_name = self.config.get("forwardName")
        jupyter_port = self.config.get("ports", {}).get("jupyter")

        if forward_name and jupyter_port:
            if self._forward_exists():
                self._warn(f"{forward_name} forwarding already exists")
            else:
                self._log("Creating port forwarding for Jupyter...")

                cmd = [
                    "mutagen",
                    "forward",
                    "create",
                    "--name",
                    forward_name,
                    f"tcp:localhost:{jupyter_port}",
                    f"{self.config['remoteHost']}:tcp:localhost:{jupyter_port}",
                ]

                result = self._run_command(cmd, capture_output=False)
                if result.returncode == 0:
                    self._log(
                        f"✓ Port forwarding created (localhost:{jupyter_port} → remote:{jupyter_port})"
                    )
                else:
                    self._error("Failed to create port forwarding")
                    return

        self._log("✓ Session and forwarding started successfully")
        if jupyter_port:
            self._log(f"  Access Jupyter at: http://localhost:{jupyter_port}")

    def stop_session(self) -> None:
        """Stop Mutagen session and forwarding"""
        self._warn(f"Stopping {self.config['sessionName']} session and forwarding...")

        # Stop forwarding
        forward_id = self._get_forward_id()
        if forward_id:
            result = self._run_command(["mutagen", "forward", "terminate", forward_id])
            if result.returncode == 0:
                self._log("✓ Port forwarding stopped")

        # Stop sync
        session_id = self._get_session_id()
        if session_id:
            result = self._run_command(["mutagen", "sync", "terminate", session_id])
            if result.returncode == 0:
                self._log("✓ Sync session stopped")

        if not session_id and not forward_id:
            self._warn("No active sessions or forwarding found")

    def show_status(self) -> None:
        """Show session and forwarding status"""
        self._log("Session and forwarding status:")
        print()

        # Show sync status
        if self._session_exists():
            print("📁 Sync Session:")
            result = self._run_command(
                ["mutagen", "sync", "list"], capture_output=False
            )
            self._log(f"✓ {self.config['sessionName']} sync is active")
        else:
            self._warn(f"❌ No {self.config['sessionName']} sync session found")

        print()

        # Show forwarding status
        if self._forward_exists():
            print("🔗 Port Forwarding:")
            result = self._run_command(
                ["mutagen", "forward", "list"], capture_output=False
            )
            jupyter_port = self.config.get("ports", {}).get("jupyter")
            if jupyter_port:
                self._log(
                    f"✓ Port forwarding active (localhost:{jupyter_port} → remote:{jupyter_port})"
                )
        else:
            self._warn("❌ No port forwarding found")

        if not self._session_exists() or not self._forward_exists():
            print()
            self._warn("Run 'python mutagen.py start' to create missing components")

    def show_logs(self) -> None:
        """Show sync logs"""
        session_id = self._get_session_id()

        if session_id:
            self._log(f"Recent sync activity for {self.config['sessionName']}:")
            self._run_command(["mutagen", "sync", "list"], capture_output=False)
        else:
            self._warn("No active session found")

    def monitor_session(self) -> None:
        """Monitor sync session in real-time"""
        session_id = self._get_session_id()

        if session_id:
            self._log(
                f"Monitoring {self.config['sessionName']} (Press Ctrl+C to stop)..."
            )
            try:
                self._run_command(
                    ["mutagen", "sync", "monitor", session_id], capture_output=False
                )
            except KeyboardInterrupt:
                self._log("\nMonitoring stopped")
        else:
            self._warn("No active session to monitor")

    def handle_conflicts(self) -> None:
        """Handle sync conflicts"""
        session_id = self._get_session_id()

        if not session_id:
            self._warn("No active session found")
            return

        self._log(f"Checking conflicts for {self.config['sessionName']}...")

        result = self._run_command(["mutagen", "sync", "list"])
        if result.returncode == 0:
            # Parse conflict count from output
            lines = result.stdout.split("\n")
            conflict_count = 0
            for line in lines:
                if "Conflicts:" in line:
                    try:
                        conflict_count = int(line.split("Conflicts:")[1].strip())
                        break
                    except (ValueError, IndexError):
                        pass

            if conflict_count == 0:
                self._log("✓ No conflicts found")
            else:
                self._error(f"⚠ Found {conflict_count} conflict(s)")
                print()
                self._warn("Resolution options:")
                print(
                    f"1. Force local → remote: mutagen sync flush --alpha-to-beta {session_id}"
                )
                print(
                    f"2. Force remote → local: mutagen sync flush --beta-to-alpha {session_id}"
                )
                print("3. Restart session: python mutagen.py restart")

    def restart_session(self) -> None:
        """Restart session"""
        self._warn("Restarting session...")
        self.stop_session()
        time.sleep(2)
        self.start_session()


def main():
    parser = argparse.ArgumentParser(
        description="Generic Mutagen management script",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "command",
        choices=[
            "init",
            "start",
            "stop",
            "status",
            "restart",
            "logs",
            "monitor",
            "conflicts",
            "test-ssh",
        ],
        help="Command to execute",
    )

    parser.add_argument(
        "--config",
        default="mutagen.yml",
        help="Configuration file path (default: mutagen.yml)",
    )

    args = parser.parse_args()

    try:
        manager = MutagenManager(args.config)

        # Handle init command separately (doesn't need config validation)
        if args.command == "init":
            manager.init_project()
            return

        # Load config and check prerequisites for other commands
        manager._load_config()
        manager._check_prerequisites()

        command_map = {
            "start": manager.start_session,
            "stop": manager.stop_session,
            "status": manager.show_status,
            "restart": manager.restart_session,
            "logs": manager.show_logs,
            "monitor": manager.monitor_session,
            "conflicts": manager.handle_conflicts,
            "test-ssh": manager.test_ssh_connection,
        }

        command_map[args.command]()

    except KeyboardInterrupt:
        print("\nOperation cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"{Colors.RED}Error: {e}{Colors.NC}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
