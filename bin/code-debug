#!/usr/bin/env python3

import argparse
import json
import os

import json5


def parse_to_debug_json(command_str: str, just_my_code: bool, name: str) -> dict:
    """
    Parse command string to VS Code debug configuration.
    Supports both python and pytest commands.
    """
    tokens = command_str.split()
    if len(tokens) < 2:
        raise ValueError(
            "Command must have at least two tokens (e.g., 'python script.py' or 'python -m pytest')."
        )
    if tokens[0] == "python" and tokens[1:3] == ["-m", "pytest"]:
        # python -m pytest [args...]
        module = "pytest"
        args = tokens[3:]
        config = {
            "name": f"Python: pytest {' '.join(args)}" if name is None else name,
            "type": "debugpy",
            "request": "launch",
            "module": module,
            "args": args,
            "justMyCode": just_my_code,
        }
    else:
        program = tokens[1]
        args = tokens[2:]
        config = {
            "name": f"Python: {program}" if name is None else name,
            "type": "debugpy",
            "request": "launch",
            "program": program,
            "console": "integratedTerminal",
            "justMyCode": just_my_code,
            "cwd": "${workspaceFolder}",
            "env": {"PYTHONPATH": "${workspaceFolder}", "DEBUG": "1"},
            "args": args,
        }
    return config


def append_to_launch_file(configuration, launch_file_path=".vscode/launch.json"):
    # Check if .vscode directory exists, if not create it
    if not os.path.exists(".vscode"):
        os.mkdir(".vscode")

    # Check if launch.json exists, if not create a basic one
    if not os.path.exists(launch_file_path):
        with open(launch_file_path, "w") as f:
            json.dump({"version": "0.2.0", "configurations": []}, f, indent=4)

    with open(launch_file_path, "r") as f:
        data = json5.load(f)

    # Find if configuration for the program already exists
    existing_config = None
    for config in data["configurations"]:
        if config["name"] == configuration["name"]:
            existing_config = config
            break

    # If it exists, update it. If not, append it
    if existing_config is not None:
        existing_config.update(configuration)
    else:
        data["configurations"].append(configuration)

    # Save back to file
    with open(launch_file_path, "w") as f:
        json.dump(data, f, indent=4)


def main():
    parser = argparse.ArgumentParser(
        description="Generate debug configuration for VS Code"
    )
    parser.add_argument(
        "command", help="The command to convert into a debug configuration."
    )
    parser.add_argument("--allcode", "-a", default=True, action="store_false")
    parser.add_argument("--name", default=None)
    args = parser.parse_args()

    configuration = parse_to_debug_json(args.command, args.allcode, args.name)
    append_to_launch_file(configuration)
    configuration = parse_to_debug_json(args.command, args.allcode, "latest")
    append_to_launch_file(configuration)


if __name__ == "__main__":
    main()
