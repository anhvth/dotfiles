#!/usr/bin/env python3

import argparse
import multiprocessing
import os
import shlex
import subprocess
import pandas as pd 

def main():
    parser = argparse.ArgumentParser(description='Process fold arguments')
    parser.add_argument('--total_fold', '-t', default=16, type=int, help='total number of folds')
    parser.add_argument('--gpus', type=str, default="0,1,2,3,4,5,6,7")
    parser.add_argument('--ignore_gpus', '-ig', type=str, default="")
    parser.add_argument('--total_cpu', type=int, default=multiprocessing.cpu_count(), help='total number of cpu cores available')
    parser.add_argument('-i', required=True)
    parser.add_argument('-o', required=True)
    parser.add_argument('cmd', nargs=argparse.REMAINDER)  # This will gather the remaining unparsed arguments
    
    args = parser.parse_args()
    args.i = os.path.abspath(args.i)
    args.o = os.path.abspath(args.o)
    # Split the input CSV file into chunks
    df = pd.read_csv(args.i, sep='\t')  # Assuming tab-separated values
    chunk_size = len(df) // args.total_fold

    # Build the command string and save to a temporary shell script
    gpus = args.gpus.split(',')
    gpus = [gpu for gpu in gpus if not gpu in args.ignore_gpus.split(',')]
    num_gpus = len(gpus)
    cpu_per_process = max(args.total_cpu // args.total_fold, 1)
    f = open('/tmp/cmd.sh', 'w')
    csv_out_chunks = [f'/tmp/output_chunk_{i}.tsv' for i in range(args.total_fold)]
    tbdelete = []
    for i in range(args.total_fold):
        gpu = gpus[i % num_gpus]
        cpu_start = (i * cpu_per_process) % args.total_cpu
        cpu_end = ((i + 1) * cpu_per_process - 1) % args.total_cpu
        input_chunk = f'/tmp/input_chunk_{i}.tsv'
        print(f'Tmpfile: {input_chunk=}')
        df[i::args.total_fold].to_csv(input_chunk, sep='\t', index=False)  # Write chunk to file here
        tbdelete.extend([input_chunk, csv_out_chunks[i]])
        fold_cmd = f"CUDA_VISIBLE_DEVICES={gpu} taskset -c {cpu_start}-{cpu_end} python {args.cmd[0]} -i {input_chunk} -o {csv_out_chunks[i]}"
        fold_cmd = fold_cmd + ' |\\\n' if i < args.total_fold - 1 else fold_cmd + '\n'
        print(fold_cmd, end='')
        f.write(fold_cmd)
    f.close()

    try:
        subprocess.run(['sh', '/tmp/cmd.sh'])
        df_out = pd.concat([pd.read_csv(out_chunk, sep='\t', header=None) for out_chunk in csv_out_chunks], ignore_index=True)
        os.makedirs(os.path.dirname(args.o), exist_ok=True)
        df_out.to_csv(args.o, sep='\t', index=False)
    finally:
        pass
        # for file in tbdelete:
        #     if os.path.exists(file):
        #         os.remove(file)
                

if __name__ == "__main__":
    main()
