#!/usr/bin/env python3

import argparse
import multiprocessing
import os
import shlex
import subprocess
import pandas as pd
import itertools
import re
import sys
import glob

def extract_output_file(command):
    match = re.search(r'(-o|--output) (\S+)', command)
    if match:
        return match.group(2)
    return None

def get_cmd_to_run(commands):
    return [cmd for cmd in commands if not os.path.exists(extract_output_file(cmd))]

def run_in_tmux(commands_to_run, tmux_name, num_windows):
    subprocess.run(['tmux', 'new-session', '-d', '-s', tmux_name])
    for i, cmd in enumerate(itertools.cycle(commands_to_run)):
        if i >= num_windows:
            break
        window_name = f"{tmux_name}:{i}"
        if i > 0:
            subprocess.run(['tmux', 'new-window', '-t', tmux_name])
        subprocess.run(['tmux', 'send-keys', '-t', window_name, cmd, 'C-m'])

def concatenate_and_save(output_dir, output_file):
    output_files = list(sorted(glob.glob(f"{output_dir}/output_chunk_*.tsv")))
    dfs = [pd.read_csv(file, sep='\t', header=None) for file in output_files]
    df = pd.concat(dfs, ignore_index=True)
    df.to_csv(output_file, sep='\t', header=None, index=None)
    for path in output_files:
        print('rm', path)
        os.remove(path)

def main(args):
    args.i = os.path.abspath(args.i)
    args.o = os.path.abspath(args.o)
    df = pd.read_csv(args.i, sep='\t')

    gpus = args.gpus.split(',')
    gpus = [gpu for gpu in gpus if gpu not in args.ignore_gpus.split(',')]
    num_gpus = len(gpus)
    cpu_per_process = max(args.total_cpu // args.total_fold, 1)
    f = open(args.tmp_script, 'w')
    csv_out_chunks = [f'{args.output_dir}/output_chunk_{i}.tsv' for i in range(args.total_fold)]
    tbdelete = []
    for i in range(args.total_fold):
        gpu = gpus[i % num_gpus]
        cpu_start = (i * cpu_per_process) % args.total_cpu
        cpu_end = ((i + 1) * cpu_per_process - 1) % args.total_cpu
        input_chunk = f'{args.input_dir}/input_chunk_{i}.tsv'
        df[i::args.total_fold].to_csv(input_chunk, sep='\t', index=False)
        tbdelete.extend([input_chunk, csv_out_chunks[i]])
        fold_cmd = f"CUDA_VISIBLE_DEVICES={gpu} taskset -c {cpu_start}-{cpu_end} python {args.cmd[0]} -i {input_chunk} -o {csv_out_chunks[i]}"
        fold_cmd = fold_cmd + '\n' if i < args.total_fold - 1 else fold_cmd + '\n'
        f.write(fold_cmd)
    f.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Process fold arguments')
    parser.add_argument('--total_fold', '-t', default=16, type=int, help='Total number of folds')
    parser.add_argument('--gpus', default="0,1,2,3,4,5,6,7", help='GPU IDs to use')
    parser.add_argument('--ignore_gpus', '-ig', default="", help='GPUs to ignore')
    parser.add_argument('--total_cpu', default=multiprocessing.cpu_count(), type=int, help='Total number of CPU cores')
    parser.add_argument('--input_dir', default="/tmp", help='Directory for input chunks')
    parser.add_argument('--output_dir', default="/tmp", help='Directory for output chunks')
    parser.add_argument('--tmp_script', default="/tmp/cmd.sh", help='Path for temporary shell script')
    parser.add_argument('-i', required=True, help='Input file')
    parser.add_argument('-o', required=True, help='Output file')
    parser.add_argument('cmd', nargs=argparse.REMAINDER, help='Command to run')
    
    args = parser.parse_args()
    main(args)
    with open(args.tmp_script, 'r') as file:
        commands = file.read().splitlines()
    commands_to_run = get_cmd_to_run(commands)
    run_in_tmux(commands_to_run, 'run', args.total_fold)
    
    import time
    while len(commands_to_run):
        commands_to_run = get_cmd_to_run(commands)
        time.sleep(5)
        print('Waiting for all intermediate outputs to become available')
        
    if not commands_to_run:
        print("No commands to run. All output files exist.")
        concatenate_and_save(args.output_dir, args.o)

